{"ast":null,"code":"/*!\n * SmartMenus jQuery Plugin Bootstrap Addon - v0.4.1 - September 17, 2017\n * http://www.smartmenus.org/\n *\n * Copyright Vasil Dinkov, Vadikom Web Ltd.\n * http://vadikom.com\n *\n * Licensed MIT\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'smartmenus'], factory);\n  } else if (typeof module === 'object' && typeof module.exports === 'object') {\n    // CommonJS\n    module.exports = factory(require('jquery'));\n  } else {\n    // Global jQuery\n    factory(jQuery);\n  }\n})(function ($) {\n  $.extend($.SmartMenus.Bootstrap = {}, {\n    keydownFix: false,\n    init: function init() {\n      // init all navbars that don't have the \"data-sm-skip\" attribute set\n      var $navbars = $('ul.navbar-nav:not([data-sm-skip])');\n      $navbars.each(function () {\n        var $this = $(this),\n            obj = $this.data('smartmenus'); // if this navbar is not initialized\n\n        if (!obj) {\n          var onInit = function onInit() {\n            // set Bootstrap's \"active\" class to SmartMenus \"current\" items (should someone decide to enable markCurrentItem: true)\n            $this.find('a.current').parent().addClass('active'); // remove any Bootstrap required attributes that might cause conflicting issues with the SmartMenus script\n\n            $this.find('a.has-submenu').each(function () {\n              var $this = $(this);\n\n              if ($this.is('[data-toggle=\"dropdown\"]')) {\n                $this.dataSM('bs-data-toggle-dropdown', true).removeAttr('data-toggle');\n              }\n\n              if ($this.is('[role=\"button\"]')) {\n                $this.dataSM('bs-role-button', true).removeAttr('role');\n              }\n            });\n          };\n\n          var onBeforeDestroy = function onBeforeDestroy() {\n            $this.find('a.current').parent().removeClass('active');\n            $this.find('a.has-submenu').each(function () {\n              var $this = $(this);\n\n              if ($this.dataSM('bs-data-toggle-dropdown')) {\n                $this.attr('data-toggle', 'dropdown').removeDataSM('bs-data-toggle-dropdown');\n              }\n\n              if ($this.dataSM('bs-role-button')) {\n                $this.attr('role', 'button').removeDataSM('bs-role-button');\n              }\n            });\n          };\n\n          var detectCollapsible = function detectCollapsible(force) {\n            var newW = obj.getViewportWidth();\n\n            if (newW != winW || force) {\n              var $carets = $this.find('.caret');\n\n              if (obj.isCollapsible()) {\n                $this.addClass('sm-collapsible'); // set \"navbar-toggle\" class to carets (so they look like a button) if the \"data-sm-skip-collapsible-behavior\" attribute is not set to the ul.navbar-nav\n\n                if (!$this.is('[data-sm-skip-collapsible-behavior]')) {\n                  $carets.addClass('navbar-toggle sub-arrow');\n                }\n              } else {\n                $this.removeClass('sm-collapsible');\n\n                if (!$this.is('[data-sm-skip-collapsible-behavior]')) {\n                  $carets.removeClass('navbar-toggle sub-arrow');\n                }\n              }\n\n              winW = newW;\n            }\n          };\n\n          $this.smartmenus({\n            // these are some good default options that should work for all\n            subMenusSubOffsetX: 2,\n            subMenusSubOffsetY: -6,\n            subIndicators: false,\n            collapsibleShowFunction: null,\n            collapsibleHideFunction: null,\n            rightToLeftSubMenus: $this.hasClass('navbar-right'),\n            bottomToTopSubMenus: $this.closest('.navbar').hasClass('navbar-fixed-bottom')\n          }).on({\n            // set/unset proper Bootstrap classes for some menu elements\n            'show.smapi': function showSmapi(e, menu) {\n              var $menu = $(menu),\n                  $scrollArrows = $menu.dataSM('scroll-arrows');\n\n              if ($scrollArrows) {\n                // they inherit border-color from body, so we can use its background-color too\n                $scrollArrows.css('background-color', $(document.body).css('background-color'));\n              }\n\n              $menu.parent().addClass('open');\n            },\n            'hide.smapi': function hideSmapi(e, menu) {\n              $(menu).parent().removeClass('open');\n            }\n          });\n          onInit();\n          obj = $this.data('smartmenus'); // custom \"isCollapsible\" method for Bootstrap\n\n          obj.isCollapsible = function () {\n            return !/^(left|right)$/.test(this.$firstLink.parent().css('float')) && this.$root.css('display') == 'block';\n          }; // custom \"refresh\" method for Bootstrap\n\n\n          obj.refresh = function () {\n            $.SmartMenus.prototype.refresh.call(this);\n            onInit(); // update collapsible detection\n\n            detectCollapsible(true);\n          }; // custom \"destroy\" method for Bootstrap\n\n\n          obj.destroy = function (refresh) {\n            onBeforeDestroy();\n            $.SmartMenus.prototype.destroy.call(this, refresh);\n          }; // keep Bootstrap's default behavior for parent items when the \"data-sm-skip-collapsible-behavior\" attribute is set to the ul.navbar-nav\n          // i.e. use the whole item area just as a sub menu toggle and don't customize the carets\n\n\n          if ($this.is('[data-sm-skip-collapsible-behavior]')) {\n            obj.opts.collapsibleBehavior = 'toggle';\n          } // onresize detect when the navbar becomes collapsible and add it the \"sm-collapsible\" class\n\n\n          var winW;\n          detectCollapsible();\n          $(window).on('resize.smartmenus' + obj.rootId, detectCollapsible);\n        }\n      }); // keydown fix for Bootstrap 3.3.5+ conflict\n\n      if ($navbars.length && !$.SmartMenus.Bootstrap.keydownFix) {\n        // unhook BS keydown handler for all dropdowns\n        $(document).off('keydown.bs.dropdown.data-api', '.dropdown-menu'); // restore BS keydown handler for dropdowns that are not inside SmartMenus navbars\n\n        if ($.fn.dropdown && $.fn.dropdown.Constructor) {\n          $(document).on('keydown.bs.dropdown.data-api', '.dropdown-menu:not([id^=\"sm-\"])', $.fn.dropdown.Constructor.prototype.keydown);\n        }\n\n        $.SmartMenus.Bootstrap.keydownFix = true;\n      }\n    }\n  }); // init ondomready\n\n  $($.SmartMenus.Bootstrap.init);\n  return $;\n});","map":null,"metadata":{},"sourceType":"script"}